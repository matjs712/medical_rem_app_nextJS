// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Registers             Registers[]
  Remedies              Remedies[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Remedies {
  id                String      @id @default(cuid())
  userId            String
  name              String
  dosis             Int
  unit              String
  start_at          DateTime?
  indications       String?
  contraindications String?
  time              Int?
  description       String?
  content           Int?
  type              String?
  expires_at        DateTime?
  img               String?
  isImportant       Boolean?
  register          Registers[]
  User              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Registers {
  id          String    @id @default(cuid())
  userId      String
  remediesId  String
  dosis       Int
  start_at    DateTime?
  lapsus      Int?
  time        Int?
  isCompleted Boolean?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  remedies    Remedies  @relation(fields: [remediesId], references: [id])
}
